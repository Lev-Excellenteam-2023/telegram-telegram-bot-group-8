import asyncio


def is_answer_relevant(chat, question: str, answer: str) -> bool:
    """
    Determines whether an answer to a given question is relevant using the OpenAIChatAPI.

    Args:
        chat (OpenAIChatAPI): An instance of the OpenAIChatAPI class for communication with OpenAI.
        question (str): The question for which the answer's relevance needs to be assessed.
        answer (str): The answer to be evaluated for relevance.

    Returns:
        bool: True if the answer is relevant, False otherwise.
    """
    messages = []
    prompt = "Please provide a concise response in one word : Is the answer relevant? (Yes/No) \n\n"
    messages.append({"role": "system", "content": prompt})
    chat.generate_response(messages)
    prompt = "Question: {question}\nAnswer: {answer}\n"
    messages.append({"role": "user", "content": prompt})
    response = chat.generate_response(messages)
    return response.lower() == 'yes'


async def calculate_scores(chat, questions_and_answers):
    """
    Calculates scores for doctor's behavior and professionalism based on patient feedback.

    Args:
        chat (OpenAIChatAPI): An instance of the OpenAIChatAPI class for communication with OpenAI.
        questions_and_answers (list): A list of tuples, each containing a question and its corresponding answer.

    Returns:
        str: A string representing the calculated scores in a specific format.
    """
    score = 0
    messages = []
    questions_and_answers_string = ''
    for question, answer in questions_and_answers.items():
        questions_and_answers_string += 'question: ' + question
        questions_and_answers_string += 'answer: ' + answer
        # Ask ChatGPT about relevance and polarity
    prompt = f"Tell me what the patient's score is for the doctor according to the question and answer below,\
notice to write in one word for each question your opinion and just from the follow options (positive/negative/neutral)\
write it for each question in space between them .for example like that: positive negative neutral negative positive"
    messages.append({"role": "system", "content": prompt})
    await chat.generate_response(messages)
    messages.append({"role": "user", "content": questions_and_answers_string})
    response = await chat.generate_response(messages)
    responses = response.split()
    for i in responses:
        if i == "positive":
            score += 10
        elif i == "neutral":
            score += 5
        elif i == "negative":
            score -= 0

    # Construct the final response
    treatment_score = score / len(questions_and_answers)
    return treatment_score


def generate_doctor_report(chat_api, feedbacks: list, questions: list):
    """
    Generate a detailed report about the doctor based on provided feedback.

    Args:
        chat_api (OpenAIChatAPI): An instance of the OpenAIChatAPI class for communication with OpenAI.
        feedbacks (list): A list of feedbacks, where each feedback is a dictionary of dictionaries
                         containing  answers.
        questions (list): A list of questions that were asked to patients.

    Returns:
        str: A detailed report about the doctor based on the provided feedback.
    """
    messages = []
    prompt = "Generate a detailed report about the doctor based on the provided feedback:\n\n"
    messages.append({"role": "system", "content": prompt})
    chat_api.generate_response(messages)
    prompt = " "
    for i, feedback in enumerate(feedbacks, start=1):
        prompt += f"Feedback {i}:\n"
        for j, (question, answer) in enumerate(zip(questions, feedback.values()), start=1):
            prompt += f"{j}. {question}\n"
            prompt += f"   Answer: {answer}\n"
        prompt += "\n"

    prompt += "Please provide a detailed report about the doctor considering the feedback provided above."
    messages.append({"role": "user", "content": prompt})
    report = chat_api.generate_response(messages)
    return report


def generate_response_question(chat, question: str, answer: str) -> str:
    """
    Generates a response question for a given answer to get more detailed information using the OpenAIChatAPI.

    Args:
        chat (OpenAIChatAPI): An instance of the OpenAIChatAPI class for communication with OpenAI.
        question (str): The original question that was asked.
        answer (str): The answer for which a response question needs to be generated.

    Returns:
        str: The response question generated by the chat.
    """
    messages = []
    prompt = "I asked the patient this question and received an answer:\n\n" \
             "the answer is not detailed enough in my opinion. Can you create a response question for the answer " \
             "that will make the user give more information?just send the question don't start your answer in response question: or something like that only the question"
    messages.append({"role": "system", "content": prompt})
    chat.generate_response(messages)
    prompt = f"Question: {question}\nAnswer: {answer}\n"
    messages.append({"role": "user", "content": prompt})

    response_question = chat.generate_response(messages)
    return response_question
